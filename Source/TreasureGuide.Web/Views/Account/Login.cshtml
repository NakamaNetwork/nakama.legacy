@inject SignInManager<ApplicationUser> SignInManager

@{
    ViewData["Title"] = "Log into Nakama Network";
}

<h2>@ViewData["Title"]</h2>
<div class="row">
    <h4>Select a service to log in with.</h4>
    <hr />
    @{
        var loginProviders = SignInManager.GetExternalAuthenticationSchemes().ToList();
        <div class="row">
            <form asp-controller="Account" asp-action="ExternalLogin" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post" class="_width100 _alignCenter">
                @foreach (var provider in loginProviders.OrderBy(x => x.DisplayName))
                {
                    <div class="col d4">
                        <button type="submit" class="button _primary _large _width100" name="provider" value="@provider.AuthenticationScheme" title="Log in using your @provider.DisplayName account">
                            @if (provider.AuthenticationScheme == "Discord")
                            {
                                <img src="/content/Discord-Logo-White.svg" class="fa fa-fw" />
                            }
                            else
                            {
                                <i class="fa fa-fw fa-@provider.AuthenticationScheme.ToLower()"></i>
                            }
                            @provider.DisplayName
                        </button>
                    </div>
                }
            </form>
        </div>
    }
</div>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}
